| Parte    | Elemento / Fun√ß√£o          | Objetivo                                         | Como funciona                                        | Observa√ß√µes                                 |
| -------- | -------------------------- | ------------------------------------------------ | ---------------------------------------------------- | ------------------------------------------- |
| **HTML** | `<div id="info">`          | Exibe informa√ß√µes do jogo (tempo, pontos, vidas) | Atualizado dinamicamente pelo JS                     | HUD fixo no canto                           |
| **HTML** | `<div id="inicio">`        | Tela inicial do jogo                             | Mostra instru√ß√µes e bot√£o **"INICIAR PROTE√á√ÉO"**     | Some quando `comecarJogo()` √© chamado       |
| **HTML** | `<div id="fim">`           | Tela de fim (derrota)                            | Exibe estat√≠sticas finais e bot√£o "Tentar novamente" | Mostrado quando vidas = 0                   |
| **HTML** | `<div id="vitoria">`       | Tela de vit√≥ria                                  | Mostra pontos e tempo ao vencer                      | Mostrado quando todos v√≠rus eliminados      |
| **HTML** | `<canvas id="gameCanvas">` | √Årea principal do jogo                           | Onde s√£o desenhados jogador, v√≠rus, part√≠culas, etc. | Controlado pelo `ctx` (contexto 2D)         |
| **CSS**  | `body {}`                  | Estilo geral da p√°gina                           | Fundo preto, fonte branca, sem rolagem               | Mant√©m est√©tica de ‚Äúsistema hacker‚Äù         |
| **CSS**  | `canvas {}`                | Estilo do campo de jogo                          | Centralizado, borda cinza e arredondada              | Destaque para a tela de a√ß√£o                |
| **CSS**  | `#info {}`                 | Caixa de HUD do jogador                          | Fundo semitransparente, canto superior esquerdo      | Mostra tempo, pontos e vidas                |
| **CSS**  | `.tela {}`                 | Estilo das telas (in√≠cio, fim, vit√≥ria)          | Tela preta semitransparente cobrindo tudo            | Texto centralizado                          |
| **CSS**  | `.tela h1 {}`              | Estilo dos t√≠tulos das telas                     | Grande, vermelho, com brilho (`text-shadow`)         | Efeito de alerta                            |
| **CSS**  | `button {}`                | Estilo dos bot√µes                                | Verde, arredondado, cresce ao passar o mouse         | Destaque de a√ß√£o                            |
| **CSS**  | `.vida {}`                 | Estilo dos cora√ß√µes (vidas)                      | Vermelhos e maiores que o texto normal               | Din√¢mico, controlado por `atualizarVidas()` |
| **JS**   | `criarImagem()`            | Cria imagens a partir de SVG                     | Usado para jogador e v√≠rus                           | Mant√©m gr√°ficos leves e vetoriais           |
| **JS**   | `criarPowerUp()`           | Gera power-ups aleat√≥rios                        | Chance de 2% por frame                               | Tipos: üõ°Ô∏è, ‚ö°, üí£                           |
| **JS**   | `aplicarPowerUp()`         | Ativa efeito do power-up                         | Vida extra, velocidade tempor√°ria, ataque forte      | Controla buffs                              |
| **JS**   | `colisaoPowerUps()`        | Detecta coleta de power-up                       | Checa dist√¢ncia entre jogador e item                 | Remove da tela ao coletar                   |
| **JS**   | `escanear()`               | Ataque especial do jogador                       | Cria c√≠rculo que elimina v√≠rus pr√≥ximos              | Base do combate                             |
| **JS**   | `criarExplosao()`          | Efeito visual ao eliminar v√≠rus                  | Cria part√≠culas que se espalham                      | Feedback visual                             |
| **JS**   | `atualizarParticulas()`    | Atualiza posi√ß√£o/vida das part√≠culas             | Remove quando `vida <= 0`                            | Anima explos√µes                             |
| **JS**   | `desenharParticulas()`     | Renderiza part√≠culas                             | Bolinhas coloridas que desaparecem aos poucos        | Usa `ctx.globalAlpha`                       |
| **JS**   | `atualizarProjetil()`      | Controla tempo do ataque                         | Diminui `duracao` at√© remover                        | Evita ataques infinitos                     |
| **JS**   | `desenharAtaque()`         | Mostra c√≠rculo de ataque                         | Azul transl√∫cido com borda ciano                     | O "scanner" do sistema                      |
| **JS**   | `moverJogador()`           | Move jogador                                     | Usa setas do teclado                                 | Inclui limites da tela                      |
| **JS**   | `criarVirus()`             | Cria v√≠rus novos                                 | Comum, r√°pido ou seguidor                            | Cada tipo tem cor e pontos                  |
| **JS**   | `moverVirusDigital()`      | Move v√≠rus                                       | Aleat√≥rio ou seguindo jogador                        | Diferen√ßa entre tipos                       |
| **JS**   | `detectarInfeccao()`       | Detecta colis√£o v√≠rus ‚Üî jogador                  | Se colidir, perde vida                               | Inicia invencibilidade tempor√°ria           |
| **JS**   | `atualizarVidas()`         | Atualiza cora√ß√µes na HUD                         | Repete "‚ù§Ô∏è" conforme vidas                           | Usa `textContent`                           |
| **JS**   | `verificarVitoria()`       | Checa se n√£o restam v√≠rus                        | Se acabar, mostra tela de vit√≥ria                    | Calcula pontos e tempo                      |
| **JS**   | `desenhar()`               | Renderiza tudo no canvas                         | Jogador, v√≠rus, ataques, part√≠culas, fundo           | Usa `ctx`                                   |
| **JS**   | `gameLoop()`               | Loop principal do jogo                           | Chama fun√ß√µes de movimento e desenho                 | Usa `requestAnimationFrame`                 |
| **JS**   | `contarTempo()`            | Cron√¥metro do jogo                               | +1s a cada segundo                                   | A cada 3s cria novo v√≠rus                   |
| **JS**   | `sistemaComprometido()`    | Finaliza jogo (derrota)                          | Mostra tela de fim                                   | Exibe estat√≠sticas finais                   |
| **JS**   | `comecarJogo()`            | Inicia/reinicia partida                          | Reseta vari√°veis e cria v√≠rus iniciais               | Chamado pelo bot√£o "INICIAR PROTE√á√ÉO"       |
| **JS**   | `reiniciar()`              | Reinicia jogo ap√≥s derrota/vit√≥ria               | Chama `comecarJogo()`                                | Usado nos bot√µes das telas                  |
